#!/usr/bin/env python3
"""
Test script for file upload functionality
"""
import asyncio
import httpx
import os
from pathlib import Path

async def test_file_upload():
    """Test the file upload endpoint"""
    base_url = "http://localhost:8000"

    # Create a test file
    test_file_path = Path("./test_upload.txt")
    test_content = "This is a test file for upload functionality.\nIt contains some sample text.\n\nGenerated by OnlyMatt AI Gateway test."

    with open(test_file_path, 'w') as f:
        f.write(test_content)

    try:
        # Test file upload
        async with httpx.AsyncClient(timeout=30.0) as client:
            with open(test_file_path, 'rb') as f:
                files = {'file': ('test_upload.txt', f, 'text/plain')}
                data = {
                    'auto_publish': 'false'
                }
                headers = {
                    'x-om-key': 'sk_admin_e0e7fbda4b440ad82606c940d6fa084f'
                }

                response = await client.post(
                    f"{base_url}/ai/files/upload",
                    files=files,
                    data=data,
                    headers=headers
                )

                print(f"Upload Status: {response.status_code}")
                print(f"Upload Response: {response.json()}")

        # Test list uploads
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {'x-om-key': 'sk_admin_e0e7fbda4b440ad82606c940d6fa084f'}
            response = await client.get(f"{base_url}/ai/files/uploads", headers=headers)

            print(f"\nList Status: {response.status_code}")
            print(f"List Response: {response.json()}")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        # Clean up test file
        if test_file_path.exists():
            test_file_path.unlink()

if __name__ == "__main__":
    print("Testing file upload functionality...")
    asyncio.run(test_file_upload())